import { storage } from '@/lib/firebase';
import { ref, listAll, deleteObject } from 'firebase/storage';

export async function DELETE(req) {
  try {
    const body = await req.json();
    const { _id } = body;

    if (!_id) {
      return new Response(JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const rootRef = ref(storage, 'InterVizo');
    const targetFolderRef = await findFolderRef(rootRef, _id);

    if (!targetFolderRef) {
      return new Response(JSON.stringify({ error: '–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }), {
        status: 404,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const deleted = await deleteAllFilesInFolder(targetFolderRef);

    return new Response(JSON.stringify({ success: true, deleted }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ Firebase:', error);
    return new Response(JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ Firebase: ' + error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}

// üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ —Å –∏–º–µ–Ω–µ–º _id
async function findFolderRef(folderRef, _id) {
  const snapshot = await listAll(folderRef);

  for (const dirRef of snapshot.prefixes) {
    if (dirRef.name === _id) {
      return dirRef;
    }

    const found = await findFolderRef(dirRef, _id);
    if (found) return found;
  }

  return null;
}

// üßπ –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–¥–ø–∞–ø–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
async function deleteAllFilesInFolder(folderRef) {
  const snapshot = await listAll(folderRef);
  const deleted = [];

  for (const fileRef of snapshot.items) {
    await deleteObject(fileRef);
    deleted.push(fileRef.fullPath);
  }

  for (const dirRef of snapshot.prefixes) {
    const subDeleted = await deleteAllFilesInFolder(dirRef);
    deleted.push(...subDeleted);
  }

  return deleted;
}
