import connectDB from '@/lib/mongodb';
import { Interview, validateInterview } from '@/models/Interview';
import { FirebaseStorageService } from './firebaseStorage';

export class InterviewService {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ
  static async createWithAudio(interviewData) {
    await connectDB();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateInterview(interviewData);
    if (!validation.success) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.error.errors[0].message}`);
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –≤ MongoDB
      const interview = await Interview.create({
        ...validation.data,
        audioStatus: 'processing', // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      });

      console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ –≤ MongoDB: ${interview._id}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –≤ —Ñ–æ–Ω–µ
      this.generateInterviewAudio(interview).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interview._id}:`, error);
        // –ü–æ–º–µ—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–∫ failed
        Interview.findByIdAndUpdate(interview._id, {
          audioStatus: 'failed',
          audioError: error.message,
        }).catch(console.error);
      });

      return interview;
    } catch (error) {
      if (error.code === 11000) {
        throw new Error('–ò–Ω—Ç–µ—Ä–≤—å—é —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
  static async generateInterviewAudio(interview) {
    try {
      console.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interview._id}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
      const audioResults = await FirebaseStorageService.uploadAllInterviewAudio(
        interview.company,
        interview._id.toString(),
        interview.data
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å URL-–∞–º–∏ –∞—É–¥–∏–æ
      const updatedData = interview.data.map((item, index) => {
        const audioResult = audioResults.find(result => result.index === index);
        return {
          ...item,
          audio: audioResult?.audioUrl || '',
        };
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
      await Interview.findByIdAndUpdate(interview._id, {
        data: updatedData,
        audioGenerated: true,
        audioStatus: 'ready',
        audioError: '',
      });

      console.log(`‚úÖ –ê—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é ${interview._id}`);
      return audioResults;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:`, error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ ID
  static async getById(id) {
    await connectDB();

    const interview = await Interview.findById(id);
    if (!interview) {
      throw new Error('–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    return interview;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ slug
  static async getBySlug(slug) {
    await connectDB();

    const interview = await Interview.findOne({ slug });
    if (!interview) {
      throw new Error('–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    return interview;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏
  static async getByCompany(company, options = {}) {
    await connectDB();

    return await Interview.findByCompany(company, options);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
  static async getByOwner(email, options = {}) {
    await connectDB();

    return await Interview.findByOwner(email, options);
  }
}
